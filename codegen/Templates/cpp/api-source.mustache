/** --------------------------------------------------------------------------------------------------------------------
* <copyright company="Aspose" file="CadApi.cpp">
*   Copyright (c) 2019 Aspose.Cad for Cloud
* </copyright>
* <summary>
*   Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
* 
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
* 
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* </summary> 
-------------------------------------------------------------------------------------------------------------------- **/
{{#operations}}

#include "{{classname}}.h"
#include "IHttpBody.h"
#include "JsonBody.h"
#include "MultipartFormData.h"

#include <unordered_set>

#include <boost/algorithm/string/replace.hpp>
#include <utility>

{{#apiNamespaceDeclarations}}
namespace {{this}} 
{
{{/apiNamespaceDeclarations}}

std::shared_ptr<FormField> deserializeFormField(web::json::value json)
{
					std::shared_ptr<FormField> field;
					if (json.has_field(_XPLATSTR("Checked")))
						field = std::make_shared<FormFieldCheckbox>();

					if (json.has_field(_XPLATSTR("TextInputFormat")) ||
						json.has_field(_XPLATSTR("TextInputDefault")))
						field = std::make_shared<FormFieldTextInput>();

					if (json.has_field(_XPLATSTR("DropDownItems")))
						field = std::make_shared<FormFieldDropDown>();

					if (!field) throw std::invalid_argument("Wrong json provided for FormFieldResponse");
					field->fromJson(json);
					return field;
				}

void postInitializeResponse(web::json::value json, void* response)
{
    if (json.has_field(_XPLATSTR("FormField")))
    {
        FormFieldResponse* fieldResponse = (FormFieldResponse*)response;
        web::json::value formField = json[_XPLATSTR("FormField")];
        fieldResponse->setFormField(deserializeFormField(formField));
    }

    if (json.has_field(_XPLATSTR("FormFields")))
    {
        FormFieldsResponse* fieldResponse = (FormFieldsResponse*)response;
        web::json::value formField = json[_XPLATSTR("FormFields")];
        std::shared_ptr<FormFieldCollection> fields = std::make_shared<FormFieldCollection>();

        std::vector<std::shared_ptr<FormField>> list;
        if (formField.has_field(_XPLATSTR("List"))
            && !formField[_XPLATSTR("List")].is_null())
        {
            for (auto& item : formField[_XPLATSTR("List")].as_array())
            {
                if (item.is_null())
                {
                    list.push_back(std::shared_ptr<FormField>(nullptr));
                }
                else
                {	
                    list.push_back(deserializeFormField(item));
                }
            }
        }

        fields->setList(list);
        fieldResponse->setFormFields(fields);
    }
}

utility::string_t replacePathParameter(utility::string_t path, const utility::string_t& paramName, const utility::string_t& value)
{
    if (!value.empty())
    {
        boost::replace_all(path, _XPLATSTR("{") + paramName + _XPLATSTR("}"),
            ApiClient::parameterToString(value));
    }
    else
    {
        boost::replace_all(path, _XPLATSTR("/{") + paramName + _XPLATSTR("}"),
            value);
    }
    return path;
}

template <class T> 
utility::string_t extractOptional(const boost::optional<T>& parameter)
{
	if (parameter.has_value())
		return ApiClient::parameterToString(parameter.value());

    return {};
}
using namespace {{modelNamespace}};

{{classname}}::{{classname}}(std::shared_ptr<ApiClient> apiClient)
    : m_ApiClient(std::move(apiClient))
{
}

{{#operation}}
pplx::task<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {{classname}}::{{operationId}}(std::shared_ptr<{{operationId}}Request> request)
{
{{#allParams}}{{#required}}{{^isPrimitiveType}}{{^isContainer}}
    // verify the required parameter '{{paramName}}' is set
    if (request->get{{baseName}}() == nullptr)
    {
        throw ApiException(400, _XPLATSTR("Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}"));
    }
{{/isContainer}}{{/isPrimitiveType}}{{/required}}{{/allParams}}
    std::shared_ptr<ApiConfiguration> apiConfiguration(m_ApiClient->getConfiguration());
    utility::string_t bPath = _XPLATSTR("/") + apiConfiguration->getApiVersion() + _XPLATSTR("{{{path}}}"),
    path = bPath;
    {{#allParams}}
    {{#isPrimitiveType}}
    {{#required}}
    path = replacePathParameter(path, _XPLATSTR("{{paramName}}"),
        ApiClient::parameterToString(request->get{{baseName}}()));
    {{/required}}
    {{^required}}
    path = replacePathParameter(path, _XPLATSTR("{{paramName}}"), 
        extractOptional(request->get{{baseName}}()));
    {{/required}}
    {{/isPrimitiveType}}
    {{/allParams}}

    std::map<utility::string_t, utility::string_t> queryParams;
    std::map<utility::string_t, utility::string_t> headerParams(apiConfiguration->getDefaultHeaders());
    std::map<utility::string_t, utility::string_t> formParams;
    std::vector<std::pair<utility::string_t, std::shared_ptr<HttpContent>>> fileParams;

    std::unordered_set<utility::string_t> responseHttpContentTypes;
    {{#produces}}
    responseHttpContentTypes.insert(_XPLATSTR("{{{mediaType}}}"));
    {{/produces}}

    utility::string_t responseHttpContentType;

    // use JSON if possible
    if (responseHttpContentTypes.empty())
    {
        {{#vendorExtensions.x-codegen-response.isString}}
        responseHttpContentType = _XPLATSTR("text/plain");
        {{/vendorExtensions.x-codegen-response.isString}}
        {{^vendorExtensions.x-codegen-response.isString}}
        responseHttpContentType = _XPLATSTR("application/json");
        {{/vendorExtensions.x-codegen-response.isString}}
    }
    // JSON
    else if (responseHttpContentTypes.find(_XPLATSTR("application/json")) != responseHttpContentTypes.end())
    {
        responseHttpContentType = _XPLATSTR("application/json");
    }
    // multipart formdata
    else if (responseHttpContentTypes.find(_XPLATSTR("multipart/form-data")) != responseHttpContentTypes.end())
    {
        responseHttpContentType = _XPLATSTR("multipart/form-data");
    }
    {{#vendorExtensions.x-codegen-response.isString}}
    // plain text
    else if (responseHttpContentTypes.find(_XPLATSTR("text/plain")) != responseHttpContentTypes.end())
    {
        responseHttpContentType = _XPLATSTR("text/plain");
    }
    {{/vendorExtensions.x-codegen-response.isString}}
    {{#vendorExtensions.x-codegen-response-ishttpcontent}}
    else
    {
        //It's going to be binary, so just use the first one.
        responseHttpContentType = *responseHttpContentTypes.begin();
    }
    {{/vendorExtensions.x-codegen-response-ishttpcontent}}
    {{^vendorExtensions.x-codegen-response-ishttpcontent}}
    else
    {
        throw ApiException(400, _XPLATSTR("{{classname}}->{{operationId}} does not produce any supported media type"));
    }
    {{/vendorExtensions.x-codegen-response-ishttpcontent}}

    headerParams[_XPLATSTR("Accept")] = responseHttpContentType;

    std::unordered_set<utility::string_t> consumeHttpContentTypes;
    {{#consumes}}
    consumeHttpContentTypes.insert(_XPLATSTR("{{{mediaType}}}"));
    {{/consumes}}

    {{#allParams}}
    {{^isBodyParam}}
    {{^isPathParam}}
    {{#required}}
        {{^isPrimitiveType}}
        {{^isContainer}}
    if (request->get{{baseName}}() != nullptr)
        {{/isContainer}}
        {{/isPrimitiveType}}
    {{/required}}
    {{^required}}
        {{^isPrimitiveType}}
        {{^isContainer}}
    if (request->get{{baseName}}() && *(request->get{{baseName}}()) != nullptr)
        {{/isContainer}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
    if (request->get{{baseName}}() && bPath.find(_XPLATSTR("{{paramName}}")) == std::string::npos)
        {{/isPrimitiveType}}
        {{#isContainer}}
    if (request->get{{baseName}})
        {{/isContainer}}
    {{/required}}
    {
        {{#isQueryParam}}
        queryParams[_XPLATSTR("{{baseName}}")] = ApiClient::parameterToString({{^required}}*{{/required}}(request->get{{baseName}}()));
        {{/isQueryParam}}
        {{#isHeaderParam}}
        headerParams[_XPLATSTR("{{baseName}}")] = ApiClient::parameterToString({{^required}}*{{/required}}(request->get{{baseName}}()));
        {{/isHeaderParam}}
        {{#isFormParam}}
        {{#isFile}}
        fileParams.push_back(make_pair(_XPLATSTR("{{baseName}}"), {{^required}}*{{/required}}(request->get{{baseName}}())));
        {{/isFile}}
        {{^isFile}}
        formParams[_XPLATSTR("{{baseName}}")] = ApiClient::parameterToString({{^required}}*{{/required}}(request->get{{baseName}}()));
        {{/isFile}}
        {{/isFormParam}}
    }
    {{/isPathParam}}
    {{/isBodyParam}}
    {{/allParams}}

    std::shared_ptr<IHttpBody> httpBody;
    utility::string_t requestHttpContentType;

    // use JSON if possible
    if (consumeHttpContentTypes.empty() || consumeHttpContentTypes.find(_XPLATSTR("application/json")) != 
    consumeHttpContentTypes.end())
    {
        requestHttpContentType = _XPLATSTR("application/json");
        {{#bodyParam}}
        web::json::value json;

        {{#isPrimitiveType}}
        json = ModelBase::toJson(request->get{{baseName}}());
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        {{#isListContainer}}
        {
            std::vector<web::json::value> jsonArray;
            for(auto& item : request->get{{baseName}}())
            {
                {{#items.isPrimitiveType}}jsonArray.push_back(ModelBase::toJson(item));
                {{/items.isPrimitiveType}}{{^items.isPrimitiveType}}{{#items.isString}}jsonArray.push_back(ModelBase::toJson(item));
                {{/items.isString}}{{^items.isString}}{{#items.isDateTime}}jsonArray.push_back(ModelBase::toJson(item));
                {{/items.isDateTime}}{{^items.isDateTime}}jsonArray.push_back( item.get() ? item->toJson() : web::json::value::null());
                {{/items.isDateTime}}{{/items.isString}}{{/items.isPrimitiveType}}
            }
            json = web::json::value::array(jsonArray);
        }
        {{/isListContainer}}
        {{^isListContainer}}{{#required}}json = ModelBase::toJson(request->get{{baseName}}());
        {{/required}}{{^required}}if (request->get{{baseName}}())
            json = ModelBase::toJson(*(request->get{{baseName}}()));{{/required}}
        {{/isListContainer}}
        {{/isPrimitiveType}}

        httpBody = std::shared_ptr<IHttpBody>(new JsonBody(json));
        {{/bodyParam}}
    }
    // multipart formdata
    else if (consumeHttpContentTypes.find(_XPLATSTR("multipart/form-data")) != consumeHttpContentTypes.end())
    {
        requestHttpContentType = _XPLATSTR("multipart/form-data");
        {{#bodyParam}}
        std::shared_ptr<MultipartFormData> multipart = std::make_shared<MultipartFormData>();
        {{#isPrimitiveType}}
        multipart->add(ModelBase::toHttpContent(_XPLATSTR("{{paramName}}"), request->get{{baseName}}()));
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        {{#isListContainer}}
        {
            std::vector<web::json::value> jsonArray;
            for( auto& item : request->get{{baseName}}())
            {
                {{#items.isPrimitiveType}}jsonArray.push_back(ModelBase::toJson(item));
                {{/items.isPrimitiveType}}{{^items.isPrimitiveType}}{{#items.isString}}jsonArray.push_back(ModelBase::toJson(item));
                {{/items.isString}}{{^items.isString}}{{#items.isDateTime}}jsonArray.push_back(ModelBase::toJson(item));
                {{/items.isDateTime}}{{^items.isDateTime}}jsonArray.push_back( item.get() ? item->toJson() : web::json::value::null());
                {{/items.isDateTime}}{{/items.isString}}{{/items.isPrimitiveType}}
            }
            multipart->add(ModelBase::toHttpContent(_XPLATSTR("{{paramName}}"), web::json::value::array(jsonArray), _XPLATSTR("application/json")));
        }{{/isListContainer}}
        {{^isListContainer}}{{#isString}}multipart->add(ModelBase::toHttpContent(_XPLATSTR("{{paramName}}"), request->get{{baseName}}()));
        {{/isString}}{{^isString}}if ({{^required}}request->get{{baseName}}() && (*(request->get{{baseName}}())){{/required}}{{#required}}request->get{{baseName}}(){{/required}}.get())
        {
            {{^required}}(*{{/required}}(request->get{{baseName}}()){{^required}}){{/required}}->toMultipart(multipart, _XPLATSTR("{{paramName}}"));
        }
        {{/isString}}
        {{/isListContainer}}
        {{/isPrimitiveType}}

        httpBody = multipart;
        requestHttpContentType += _XPLATSTR("; boundary=") + multipart->getBoundary();
        {{/bodyParam}}
    }
    else
    {
        throw ApiException(415, _XPLATSTR("{{classname}}->{{operationId}} does not consume any supported media type"));
    }

    {{#authMethods}}
    // authentication ({{name}}) required
    {{#isApiKey}}
    {{#isKeyInHeader}}
    {
        utility::string_t apiKey = apiConfiguration->getApiKey(_XPLATSTR("{{keyParamName}}"));
        if (!apiKey.empty())
        {
            headerParams[_XPLATSTR("{{keyParamName}}")] = apiKey;
        }
    }
    {{/isKeyInHeader}}
    {{#isKeyInQuery}}
    {
        utility::string_t apiKey = apiConfiguration->getApiKey(_XPLATSTR("{{keyParamName}}"));
        if (!apiKey.empty())
        {
            queryParams[_XPLATSTR("{{keyParamName}}")] = apiKey;
        }
    }
    {{/isKeyInQuery}}
    {{/isApiKey}}
    {{#isBasic}}
    // Basic authentication is added automatically as part of the http_client_config
    {{/isBasic}}
    {{#isOAuth}}
    // oauth2 authentication is added automatically as part of the http_client_config
    {{/isOAuth}}
    {{/authMethods}}

    return m_ApiClient->callApi(path, _XPLATSTR("{{httpMethod}}"), queryParams, httpBody, headerParams, formParams, fileParams,
    requestHttpContentType)
    .then([=](web::http::http_response response)
    {
        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (response.status_code() >= 400)
        {
            throw ApiException(response.status_code()
                , _XPLATSTR("error calling {{operationId}}: ") + response.reason_phrase()
                , std::make_shared<std::stringstream>(response.extract_utf8string(true).get()));
        }

        {{#vendorExtensions.x-codegen-response-ishttpcontent}}
        return response.extract_vector();
    })
    .then([=](std::vector<unsigned char> response)
    {
        HttpContent result;
        std::shared_ptr<std::stringstream> stream = std::make_shared<std::stringstream>(std::string(response.begin(), response.end()));
        result.setData(stream);
        return result;
        {{/vendorExtensions.x-codegen-response-ishttpcontent}}
        {{^vendorExtensions.x-codegen-response-ishttpcontent}}
        return response.extract_string();
    })
    .then([=](utility::string_t response)
    {
        {{^returnType}}
        return void();
        {{/returnType}}
        {{#returnType}}
        {{#returnContainer}}
        {{{returnType}}} result;
        {{/returnContainer}}
        {{^returnContainer}}
        {{{returnType}}} result({{{defaultResponse}}});
        {{/returnContainer}}

        if (responseHttpContentType == _XPLATSTR("application/json"))
        {
            web::json::value json = web::json::value::parse(response);

            {{#isListContainer}}for( auto& item : json.as_array())
            {
                {{#vendorExtensions.x-codegen-response.items.isPrimitiveType}}result.push_back(ModelBase::{{vendorExtensions.x-codegen-response.items.datatype}}FromJson(item));
                {{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}{{^vendorExtensions.x-codegen-response.items.isPrimitiveType}}{{#vendorExtensions.x-codegen-response.items.isString}}result.push_back(ModelBase::stringFromJson(item));
                {{/vendorExtensions.x-codegen-response.items.isString}}{{^vendorExtensions.x-codegen-response.items.isString}}{{{vendorExtensions.x-codegen-response.items.datatype}}} itemObj({{{vendorExtensions.x-codegen-response.items.defaultValue}}});
                itemObj->fromJson(item);
                result.push_back(itemObj);
                {{/vendorExtensions.x-codegen-response.items.isString}}{{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}
            }
            {{/isListContainer}}{{^isListContainer}}{{#isMapContainer}}for( auto& item : json.as_object())
            {
                {{#vendorExtensions.x-codegen-response.items.isPrimitiveType}}result[item.first] = ModelBase::{{vendorExtensions.x-codegen-response.items.datatype}}FromJson(item.second);
                {{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}{{^vendorExtensions.x-codegen-response.items.isPrimitiveType}}{{#vendorExtensions.x-codegen-response.items.isString}}result[item.first] = ModelBase::stringFromJson(item.second);
                {{/vendorExtensions.x-codegen-response.items.isString}}{{^vendorExtensions.x-codegen-response.items.isString}}{{{vendorExtensions.x-codegen-response.items.datatype}}} itemObj({{{vendorExtensions.x-codegen-response.items.defaultValue}}});
                itemObj->fromJson(item.second);
                result[item.first] = itemObj;
                {{/vendorExtensions.x-codegen-response.items.isString}}{{/vendorExtensions.x-codegen-response.items.isPrimitiveType}}
            }
            {{/isMapContainer}}{{^isMapContainer}}{{#vendorExtensions.x-codegen-response.isPrimitiveType}}{{#vendorExtensions.x-codegen-response.items.datatype}}result = ModelBase::{{vendorExtensions.x-codegen-response.items.datatype}}FromJson(json);
            {{/vendorExtensions.x-codegen-response.items.datatype}}{{^vendorExtensions.x-codegen-response.items.datatype}}result = ModelBase::{{vendorExtensions.x-codegen-response.datatype}}FromJson(json);
            {{/vendorExtensions.x-codegen-response.items.datatype}}{{/vendorExtensions.x-codegen-response.isPrimitiveType}}{{^vendorExtensions.x-codegen-response.isPrimitiveType}}{{#vendorExtensions.x-codegen-response.isString}}result = ModelBase::stringFromJson(json);
            {{/vendorExtensions.x-codegen-response.isString}}{{^vendorExtensions.x-codegen-response.isString}}
            result->fromJson(json);
            postInitializeResponse(json, result.get());
            {{/vendorExtensions.x-codegen-response.isString}}{{/vendorExtensions.x-codegen-response.isPrimitiveType}}{{/isMapContainer}}{{/isListContainer}}
        }{{#vendorExtensions.x-codegen-response.isString}}
        else if (responseHttpContentType == _XPLATSTR("text/plain"))
        {
            result = response;
        }{{/vendorExtensions.x-codegen-response.isString}}
        // else if (responseHttpContentType == _XPLATSTR("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else
        {
            throw ApiException(500
                , _XPLATSTR("error calling {{operationId}}: unsupported response type"));
        }

        return result;
        {{/returnType}}
        {{/vendorExtensions.x-codegen-response-ishttpcontent}}
    });
}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}

{{>requestModel_source}}
