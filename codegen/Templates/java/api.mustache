{{>licenseInfo}}
package {{package}};

import com.sun.jersey.api.client.GenericType;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{modelPackage}}.requests.*;
import {{invokerPackage}}.Pair;

{{#imports}}import {{import}};
{{/imports}}


{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
    private ApiClient {{localVariablePrefix}}apiClient;

    public {{classname}}() {
      this(Configuration.getDefaultApiClient());
    }

    public {{classname}}(ApiClient apiClient) {
      this.{{localVariablePrefix}}apiClient = apiClient;
    }

    public ApiClient getApiClient() {
      return {{localVariablePrefix}}apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
      this.{{localVariablePrefix}}apiClient = apiClient;
    }

    {{#operation}}
    /**
     * {{summary}}
     */
    public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}}({{vendorExtensions.x-operationId}}Request request) throws ApiException {
        Object {{localVariablePrefix}}localVarPostBody = {{#bodyParam}}request.get{{baseName}}(){{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#allParams}}{{#required}}
        // verify the required parameter '{{baseName}}' is set
        if (request.get{{baseName}}() == null) {
          throw new ApiException(400, "Missing the required parameter '{{baseName}}' when calling {{operationId}}");
        }
        {{/required}}{{/allParams}}
        // create path and map variables
        String {{localVariablePrefix}}localVarPath = "{{{path}}}"{{#pathParams}}
          .replaceAll("\\{" + "{{{paramName}}}" + "\\}", {{localVariablePrefix}}apiClient.escapeString(request.get{{baseName}}().toString())){{/pathParams}};
        
        // query params
        {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarCollectionQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
        {{javaUtilPrefix}}Map<String, String> {{localVariablePrefix}}localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
        {{javaUtilPrefix}}Map<String, Object> {{localVariablePrefix}}localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();
        
        {{#queryParams}}
        {{localVariablePrefix}}localVarPath = addParameterToQuery(localVarQueryParams, localVarPath, "{{baseName}}", request.get{{baseName}}());
        {{/queryParams}}
        
        {{#headerParams}}if (request.get{{baseName}}() != null)
          {{localVariablePrefix}}localVarHeaderParams.put("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString(request.get{{baseName}}()));
        {{/headerParams}}
        
        {{#formParams}}if (request.get{{baseName}}() != null)
          {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", request.get{{baseName}}());
        {{/formParams}}
        
        final String[] {{localVariablePrefix}}localVarAccepts = {
          {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
        };
        final String {{localVariablePrefix}}localVarAccept = {{localVariablePrefix}}apiClient.selectHeaderAccept({{localVariablePrefix}}localVarAccepts);
        
        final String[] {{localVariablePrefix}}localVarContentTypes = {
          {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
        };
        String {{localVariablePrefix}}localVarContentType = {{localVariablePrefix}}apiClient.selectHeaderContentType({{localVariablePrefix}}localVarContentTypes);
		if ({{localVariablePrefix}}localVarFormParams.size() > 0) {
            {{localVariablePrefix}}localVarContentType = "multipart/form-data";
        }
        
        String[] {{localVariablePrefix}}localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };
        
        {{#returnType}}
        GenericType<{{{returnType}}}> {{localVariablePrefix}}localVarReturnType = new GenericType<{{{returnType}}}>() {};
        return {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarCollectionQueryParams,              {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType,   {{localVariablePrefix}}localVarAuthNames, {{localVariablePrefix}}localVarReturnType);
        {{/returnType}}{{^returnType}}
        {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarCollectionQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType, {{localVariablePrefix}}localVarAuthNames, null);
        {{/returnType}}
    }
  {{/operation}}  
    private String addParameterToQuery(List<Pair> queryParams, String path, String paramName, Object paramValue){
        if (path.contains("{" + paramName + "}")){
            if (paramValue == null || paramValue == ""){
                return path.replace("{" + paramName + "}", "");
            }else {
                return path.replace("{" + paramName + "}", paramValue.toString());
            }
        }

        queryParams.addAll(apiClient.parameterToPair(paramName, paramValue));
        return path;
    }
}
{{/operations}}
{{>requestModel}}