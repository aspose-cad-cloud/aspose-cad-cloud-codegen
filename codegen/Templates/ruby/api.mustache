# -----------------------------------------------------------------------------------
# <copyright company="Aspose" file="cad_api.rb">
#   Copyright (c) 2018 Aspose.CAD Cloud
# </copyright>
# <summary>
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
# </summary>
# -----------------------------------------------------------------------------------

require 'uri'

module {{moduleName}}
{{#operations}}
  #
  # Aspose.CAD Cloud API
  #
  class {{classname}}
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
      require_all '../models/requests'
      request_token
    end
{{#operation}}
{{newline}}
    # {{{summary}}}
    # {{{notes}}}
    # @param request {{operationId}}_request
    # @return [{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}nil{{/returnType}}]
    def {{operationId}}(request)
      data, _status_code, _headers = {{operationId}}_with_http_info(request)
      request_token if _status_code == 401
      {{#returnType}}data{{/returnType}}{{^returnType}}nil{{/returnType}}
    end

    # {{summary}}
    # {{notes}}
    # @param request {{operationId}}_request
    # @return [Array<({{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}nil{{/returnType}}, Fixnum, Hash)>]
    # {{#returnType}}{{{returnType}}} data{{/returnType}}{{^returnType}}nil{{/returnType}}, response status code and response headers
    def {{operationId}}_with_http_info(request)
      raise ArgumentError, 'Incorrect request type' unless request.is_a? {{operationId}}_request

      @api_client.config.logger.debug 'Calling API: {{classname}}.{{operationId}} ...' if @api_client.config.debugging
      {{#allParams}}
      {{#required}}
      # verify the required parameter '{{paramName}}' is set
      raise ArgumentError, 'Missing the required parameter {{paramName}} when calling {{classname}}.{{operationId}}' if @api_client.config.client_side_validation && request.{{{paramName}}}.nil?
      {{#isEnum}}
      {{^isContainer}}
      # verify enum value
      raise ArgumentError, 'invalid value for {{{paramName}}}, must be one of {{#allowableValues}}{{#values}}{{{this}}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}' if @api_client.config.client_side_validation && ![{{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}].include?(request.{{{paramName}}})
      {{/isContainer}}
      {{/isEnum}}
      {{/required}}
      {{^required}}
      {{#isEnum}}
      {{#collectionFormat}}
      raise ArgumentError, 'invalid value for {{{paramName}}}, must include one of {{#allowableValues}}{{#values}}{{{this}}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}' if @api_client.config.client_side_validation && request.{{{paramName}}} && !request.{{{paramName}}}.all?{|item| [{{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}].include?(item)}

      {{/collectionFormat}}
      {{^collectionFormat}}
      raise ArgumentError, 'invalid value for {{{paramName}}}, must be one of {{#allowableValues}}{{#values}}{{{this}}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}' if @api_client.config.client_side_validation && request.{{{paramName}}} && ![{{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}].include?(request.{{{paramName}}})
      {{/collectionFormat}}
      {{/isEnum}}
      {{/required}}
      {{#hasValidation}}
      {{#maxLength}}
      raise ArgumentError, 'invalid value for {{#required}}{{{paramName}}}{{/required}}{{^required}}{{operationId}}_request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, the character length must be smaller than or equal to {{{maxLength}}}.' if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}}.to_s.length > {{{maxLength}}}

      {{/maxLength}}
      {{#minLength}}
      raise ArgumentError, 'invalid value for {{#required}}{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, the character length must be great than or equal to {{{minLength}}}.' if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}}.to_s.length < {{{minLength}}}

      {{/minLength}}
      {{#maximum}}
      raise ArgumentError, 'invalid value for {{#required}}{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{{maximum}}}.' if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{{maximum}}}

      {{/maximum}}
      {{#minimum}}
       raise ArgumentError, 'invalid value for {{#required}}{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, must be greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{{minimum}}}.' if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{{minimum}}}

      {{/minimum}}
      {{#pattern}}
      raise ArgumentError, "invalid value for {{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}." if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} !~ Regexp.new({{{pattern}}})

      {{/pattern}}
      {{#maxItems}}
      raise ArgumentError, 'invalid value for {{#required}}request.{{{paramName}}}{{/required}}{{^required}}{request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{{maxItems}}}.' if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}}.length > {{{maxItems}}}

      {{/maxItems}}
      {{#minItems}}
      raise ArgumentError, 'invalid value for {{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}} when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{{minItems}}}.' if @api_client.config.client_side_validation && {{^required}}!request.{{{paramName}}}.nil? && {{/required}}{{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}}.length < {{{minItems}}}

      {{/minItems}}
      {{/hasValidation}}
      {{/allParams}}
      # resource path
      local_var_path = '{{{path}}}'
      {{#pathParams}}
      local_var_path = local_var_path.sub('{' + downcase_first_letter('{{baseName}}') + '}', request.{{paramName}}.to_s)
      {{/pathParams}}

      # query parameters
      query_params = {}
      {{#queryParams}}
      {{#required}}
      query_params[downcase_first_letter('{{baseName}}')] = {{#collectionFormat}}@api_client.build_collection_param(request.{{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}request.{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/queryParams}}
      {{#queryParams}}
      {{^required}}
      if local_var_path.include? downcase_first_letter('{{baseName}}')
        local_var_path = local_var_path.sub('{' + downcase_first_letter('{{baseName}}') + '}', request.{{paramName}}.to_s)
      else
        query_params[downcase_first_letter('{{baseName}}')] = {{#collectionFormat}}@api_client.build_collection_param(request.{{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}request.{{{paramName}}}{{/collectionFormat}} unless request.{{{paramName}}}.nil?
      end{{/required}}
      {{/queryParams}}

      # header parameters
      header_params = {}
      {{#hasProduces}}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept([{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}])
      {{/hasProduces}}
      {{#hasConsumes}}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type([{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}])
      {{/hasConsumes}}
      {{#headerParams}}
      {{#required}}
      header_params[downcase_first_letter('{{baseName}}')] = {{#collectionFormat}}@api_client.build_collection_param(request.{{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}request.{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/headerParams}}
      {{#headerParams}}
      {{^required}}
      header_params[downcase_first_letter('{{baseName}}')] = {{#collectionFormat}}@api_client.build_collection_param(request.{{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}request.{{{paramName}}}{{/collectionFormat}} unless request.{{{paramName}}}.nil?
      {{/required}}
      {{/headerParams}}

      # form parameters
      form_params = {}
      {{#formParams}}
      {{#required}}
      form_params[downcase_first_letter('{{baseName}}')] = {{#collectionFormat}}@api_client.build_collection_param(request.{{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}request.{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/formParams}}
      {{#formParams}}
      {{^required}}
      form_params[downcase_first_letter('{{baseName}}')] = {{#collectionFormat}}@api_client.build_collection_param(request.{{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}request.{{{paramName}}}{{/collectionFormat}} unless request.{{paramName}}.nil?
      {{/required}}
      {{/formParams}}
	  
      if not form_params.empty?
        header_params['Content-Type'] = 'multipart/form-data'
      end

      # http body (model)
      {{^bodyParam}}
      post_body = nil
      {{/bodyParam}}
      {{#bodyParam}}
      post_body = @api_client.object_to_http_body({{#required}}request.{{{paramName}}}{{/required}}{{^required}}request.{{{paramName}}}{{/required}})
      {{/bodyParam}}
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:{{httpMethod}}, local_var_path,
                                                        header_params: header_params,
                                                        query_params: query_params,
                                                        form_params: form_params,
                                                        body: post_body,
                                                        auth_names: auth_names{{#returnType}},
                                                        return_type: '{{{returnType}}}'{{/returnType}})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called:
        {{classname}}#{{operationId}}\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
{{/operation}}

     #
     # Helper method to convert first letter to downcase
     #
    private def downcase_first_letter(str)
      value = str[0].downcase + str[1..-1]
      value
    end
                 
     #
     # Gets a request token from server
     #
    private def request_token
      config = @api_client.config
      api_version = config.api_version
      config.api_version = ''
      request_url = "/connect/token"
      post_data = "grant_type=client_credentials" + "&client_id=" + config.api_key['app_sid'] + "&client_secret=" + config.api_key['api_key']
      data, status_code, header = @api_client.call_api(:POST, request_url, :body => post_data, :header_params => { "Content-Type": "application/x-www-form-urlencoded" }, :return_type => 'Object')
      @api_client.config.access_token = data[:access_token]
      @api_client.config.api_version = api_version
    end
    
    # requires all files inside a directory from current dir
    # @param _dir can be relative path like '/lib' or "../lib"
    private def require_all(_dir)
      Dir[File.expand_path(File.join(File.dirname(File.absolute_path(__FILE__)), _dir)) + "/*.rb"].each do |file|
        require file
      end
    end
  end
{{/operations}}
end
{{> requestModel}}