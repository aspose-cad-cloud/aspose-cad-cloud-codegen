{{>license}}
import Foundation

open class {{projectName}}API {
    open static var basePath = "https://api.aspose.cloud"
    open static var apiVersion = "v1"
    open static var baseUrl = "\(basePath)/\(apiVersion)"
    open static var credential: URLCredential?
    open static var appKey: String?
    open static var appSid: String?
    open static var access_token: String?
    open static var customHeaders: [String:String] = ["x-aspose-client" : "swift sdk",
                                                      "x-aspose-version" : "18.11"]
    open static var requestBuilderFactory: RequestBuilderFactory = AlamofireRequestBuilderFactory()
}

open class RequestBuilder<T> {
    var credential: URLCredential?
    var headers: [String:String]
    public let parameters: [String:Any]?
    public let isBody: Bool
    public let method: String
    public let URLString: String

    /// Optional block to obtain a reference to the request's progress instance when available.
    public var onProgressReady: ((Progress) -> ())?

    required public init(method: String, URLString: String, parameters: [String:Any]?, isBody: Bool, headers: [String:String] = [:]) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.isBody = isBody
        self.headers = headers

        addHeaders({{projectName}}API.customHeaders)

        //OAuth2.0
        _ = addHeader(name: "Authorization", value: "Bearer " + {{projectName}}API.accessToken!)
    }

    open func addHeaders(_ aHeaders:[String:String]) {
        for (header, value) in aHeaders {
            headers[header] = value
        }
    }
    
    public func addHeader(name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }

    open func execute(_ completion: @escaping (_ response: Response<T>?, _ error: Error?) -> Void) { }

    public func addHeader(name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }

    open func addCredential() -> Self {
        self.credential = {{projectName}}API.credential
        return self
    }
}

public protocol RequestBuilderFactory {
    func getNonDecodableBuilder<T>() -> RequestBuilder<T>.Type
    func getBuilder<T:Decodable>() -> RequestBuilder<T>.Type
}
